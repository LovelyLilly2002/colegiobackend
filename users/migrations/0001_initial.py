# Generated by Django 5.2.7 on 2025-10-19 21:00

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nombre', models.CharField(help_text='Nombre del usuario o docente.', max_length=100, verbose_name='Nombre')),
                ('apellidos', models.CharField(help_text='Apellidos completos del usuario.', max_length=100, verbose_name='Apellidos')),
                ('dni', models.CharField(blank=True, help_text='Documento Nacional de Identidad (8 dígitos).', max_length=8, null=True, unique=True, verbose_name='DNI')),
                ('telefono', models.CharField(blank=True, help_text='Número de teléfono de contacto.', max_length=15, verbose_name='Teléfono')),
                ('rol', models.CharField(choices=[('ADMIN', 'Administrador'), ('BIENES', 'Responsable de Bienes'), ('BIBLIOTECA', 'Responsable de Biblioteca'), ('GENERAL', 'Usuario General')], default='GENERAL', help_text='Rol o tipo de usuario dentro del sistema.', max_length=20)),
                ('es_docente', models.BooleanField(default=False, help_text='Marcar si el usuario pertenece al personal docente.', verbose_name='Es docente')),
                ('grado', models.CharField(blank=True, help_text='Grado que enseña el docente (si aplica).', max_length=10, verbose_name='Grado')),
                ('seccion', models.CharField(blank=True, help_text='Sección a cargo del docente.', max_length=10, verbose_name='Sección')),
                ('turno', models.CharField(blank=True, choices=[('MAÑANA', 'Mañana'), ('TARDE', 'Tarde')], help_text='Turno en el que trabaja el docente.', max_length=20, verbose_name='Turno')),
                ('nivel', models.CharField(blank=True, choices=[('INICIAL', 'Inicial'), ('PRIMARIA', 'Primaria'), ('SECUNDARIA', 'Secundaria')], help_text='Nivel educativo donde enseña el docente.', max_length=20, verbose_name='Nivel')),
                ('fecha_registro', models.DateTimeField(auto_now_add=True, help_text='Fecha en la que el usuario fue creado en el sistema.', verbose_name='Fecha de registro')),
                ('ultima_actualizacion', models.DateTimeField(auto_now=True, help_text='Fecha de la última modificación del usuario.', verbose_name='Última actualización')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
                'ordering': ['-fecha_registro'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
